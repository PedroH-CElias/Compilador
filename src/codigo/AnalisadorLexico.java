/* The following code was generated by JFlex 1.4.3 on 05/06/23 22:56 */

package codigo;
import static codigo.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 05/06/23 22:56 from the specification file
 * <tt>/home/dioneja/workspace/AnalizadorLexico/src/codigo/Lexer.flex</tt>
 */
class AnalisadorLexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\15\2\0\1\1\22\0\1\52\1\0\1\37\2\0"+
    "\1\53\1\0\1\40\1\35\1\36\1\56\1\55\1\42\1\57\1\41"+
    "\1\14\12\13\2\0\1\50\1\51\1\47\2\0\10\12\1\25\5\12"+
    "\1\26\13\12\1\45\1\0\1\46\1\54\2\0\1\7\1\24\1\27"+
    "\1\33\1\5\1\6\1\20\1\12\1\22\1\32\1\12\1\10\1\21"+
    "\1\30\1\17\1\16\1\34\1\3\1\11\1\2\1\4\1\31\3\12"+
    "\1\23\1\43\1\1\1\44\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\3\3\1\4\4\3\1\5\1\6"+
    "\10\3\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\1\1\24"+
    "\1\25\1\26\1\27\13\3\1\30\1\31\1\0\1\1"+
    "\2\3\1\32\6\3\1\33\2\0\1\34\1\35\1\36"+
    "\1\37\1\40\10\3\1\41\1\42\4\3\1\43\10\3"+
    "\1\44\1\45\1\46\1\47\1\50\6\3\1\51\1\3"+
    "\1\52\4\3\1\53\11\3\1\54\5\3\1\55\5\3"+
    "\1\56\1\3\1\57\1\60\3\3\1\61\1\3\1\62"+
    "\1\63\4\3\1\64\1\3\1\65\1\66\1\3\1\67"+
    "\2\3\1\70\1\71\2\3\1\72\1\73\2\3\1\74"+
    "\1\3\1\75\2\3\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\60\0\60\0\u03f0"+
    "\0\u0420\0\60\0\60\0\60\0\60\0\60\0\60\0\u0450"+
    "\0\u0480\0\u04b0\0\u04e0\0\60\0\60\0\60\0\60\0\u0510"+
    "\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690"+
    "\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810"+
    "\0\220\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\220"+
    "\0\u0960\0\u0990\0\60\0\60\0\60\0\60\0\60\0\u09c0"+
    "\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\220"+
    "\0\220\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0780\0\u0c00\0\u0c30"+
    "\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\220\0\220"+
    "\0\60\0\60\0\220\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40"+
    "\0\u0e70\0\220\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90"+
    "\0\220\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0"+
    "\0\u1110\0\u1140\0\220\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230"+
    "\0\220\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\220\0\u1350"+
    "\0\220\0\220\0\u1380\0\u13b0\0\u13e0\0\220\0\u1410\0\220"+
    "\0\220\0\u1440\0\u1470\0\u14a0\0\u14d0\0\220\0\u1500\0\220"+
    "\0\u1530\0\u1560\0\220\0\u1590\0\u15c0\0\220\0\220\0\u15f0"+
    "\0\u1620\0\220\0\220\0\u1650\0\u1680\0\220\0\u16b0\0\220"+
    "\0\u16e0\0\u1710\0\220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\4\1\14\1\15\1\3\1\16\1\17"+
    "\2\4\1\20\1\4\1\21\2\4\1\22\1\23\1\24"+
    "\1\4\1\25\1\4\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\2\1\44\1\45\1\46\1\47\61\0\1\3"+
    "\13\0\1\3\34\0\1\3\7\0\12\4\2\0\17\4"+
    "\25\0\3\4\1\50\6\4\2\0\17\4\25\0\1\51"+
    "\11\4\2\0\17\4\25\0\7\4\1\52\2\4\2\0"+
    "\12\4\1\53\4\4\25\0\2\4\1\54\2\4\1\55"+
    "\4\4\2\0\4\4\1\56\12\4\25\0\1\57\1\60"+
    "\10\4\2\0\17\4\25\0\3\4\1\61\6\4\2\0"+
    "\1\4\1\62\15\4\25\0\3\4\1\63\6\4\2\0"+
    "\17\4\25\0\11\64\1\14\2\0\17\64\4\0\1\65"+
    "\32\0\1\66\45\0\1\4\1\67\3\4\1\70\4\4"+
    "\2\0\17\4\25\0\2\4\1\71\7\4\2\0\17\4"+
    "\25\0\12\4\2\0\12\4\1\72\4\4\25\0\12\4"+
    "\2\0\4\4\1\73\12\4\25\0\5\4\1\74\4\4"+
    "\2\0\1\4\1\75\15\4\25\0\5\4\1\76\4\4"+
    "\2\0\17\4\25\0\5\4\1\77\4\4\2\0\17\4"+
    "\25\0\3\4\1\100\6\4\2\0\17\4\25\0\11\101"+
    "\3\0\17\101\25\0\11\102\3\0\17\102\74\0\1\103"+
    "\55\0\1\104\1\0\1\105\57\0\1\106\7\0\1\3"+
    "\13\0\1\3\34\0\1\3\1\107\6\0\5\4\1\110"+
    "\4\4\2\0\1\111\16\4\25\0\12\4\2\0\4\4"+
    "\1\112\12\4\25\0\12\4\2\0\11\4\1\113\5\4"+
    "\25\0\1\114\11\4\2\0\16\4\1\115\25\0\12\4"+
    "\2\0\12\4\1\116\4\4\25\0\12\4\2\0\11\4"+
    "\1\117\5\4\25\0\12\4\2\0\3\4\1\120\13\4"+
    "\25\0\3\4\1\121\6\4\2\0\17\4\25\0\1\4"+
    "\1\122\10\4\2\0\17\4\25\0\12\4\2\0\4\4"+
    "\1\123\12\4\25\0\12\4\2\0\2\4\1\124\14\4"+
    "\25\0\12\4\2\0\12\4\1\125\4\4\25\0\11\64"+
    "\3\0\17\64\36\0\1\126\44\0\15\66\1\0\42\66"+
    "\2\0\12\4\2\0\1\4\1\127\15\4\25\0\1\4"+
    "\1\130\4\4\1\131\3\4\2\0\17\4\25\0\1\132"+
    "\11\4\2\0\4\4\1\133\12\4\25\0\12\4\2\0"+
    "\6\4\1\134\10\4\25\0\1\4\1\135\10\4\2\0"+
    "\17\4\25\0\12\4\2\0\12\4\1\136\4\4\25\0"+
    "\12\4\2\0\1\4\1\137\15\4\25\0\1\4\1\140"+
    "\10\4\2\0\17\4\25\0\12\101\2\0\17\101\2\0"+
    "\1\141\22\0\11\102\3\0\17\102\3\0\1\142\21\0"+
    "\6\4\1\143\3\4\2\0\17\4\25\0\12\4\2\0"+
    "\4\4\1\144\12\4\25\0\6\4\1\145\3\4\2\0"+
    "\17\4\25\0\1\4\1\146\10\4\2\0\17\4\25\0"+
    "\5\4\1\147\4\4\2\0\17\4\25\0\2\4\1\150"+
    "\7\4\2\0\17\4\25\0\12\4\2\0\11\4\1\151"+
    "\5\4\25\0\5\4\1\152\4\4\2\0\17\4\25\0"+
    "\5\4\1\153\4\4\2\0\17\4\25\0\5\4\1\154"+
    "\4\4\2\0\17\4\25\0\12\4\2\0\4\4\1\155"+
    "\12\4\25\0\5\4\1\156\4\4\2\0\17\4\25\0"+
    "\12\4\2\0\2\4\1\157\6\4\1\160\5\4\25\0"+
    "\5\4\1\161\4\4\2\0\17\4\25\0\5\4\1\162"+
    "\4\4\2\0\17\4\25\0\3\4\1\163\6\4\2\0"+
    "\17\4\25\0\12\4\2\0\11\4\1\164\5\4\25\0"+
    "\12\4\2\0\7\4\1\165\7\4\25\0\5\4\1\166"+
    "\4\4\2\0\17\4\25\0\7\4\1\167\2\4\2\0"+
    "\17\4\25\0\1\170\11\4\2\0\17\4\25\0\12\4"+
    "\2\0\4\4\1\171\12\4\25\0\3\4\1\172\6\4"+
    "\2\0\17\4\25\0\12\4\2\0\1\4\1\173\15\4"+
    "\25\0\5\4\1\174\4\4\2\0\17\4\25\0\5\4"+
    "\1\175\4\4\2\0\17\4\25\0\12\4\2\0\12\4"+
    "\1\176\4\4\25\0\6\4\1\177\3\4\2\0\17\4"+
    "\25\0\12\4\2\0\11\4\1\200\5\4\25\0\12\4"+
    "\2\0\1\4\1\201\15\4\25\0\1\4\1\202\10\4"+
    "\2\0\17\4\25\0\3\4\1\203\6\4\2\0\17\4"+
    "\25\0\12\4\2\0\13\4\1\204\3\4\25\0\12\4"+
    "\2\0\4\4\1\205\12\4\25\0\12\4\2\0\4\4"+
    "\1\206\12\4\25\0\12\4\2\0\10\4\1\207\6\4"+
    "\25\0\12\4\2\0\11\4\1\210\5\4\25\0\1\211"+
    "\11\4\2\0\17\4\25\0\5\4\1\212\4\4\2\0"+
    "\17\4\25\0\12\4\2\0\5\4\1\213\11\4\25\0"+
    "\12\4\2\0\13\4\1\214\3\4\25\0\12\4\2\0"+
    "\12\4\1\215\4\4\25\0\12\4\2\0\1\4\1\216"+
    "\15\4\25\0\12\4\2\0\14\4\1\217\2\4\25\0"+
    "\12\4\2\0\12\4\1\220\4\4\25\0\12\4\2\0"+
    "\1\4\1\221\15\4\25\0\5\4\1\222\4\4\2\0"+
    "\17\4\25\0\12\4\2\0\15\4\1\223\1\4\25\0"+
    "\1\4\1\224\10\4\2\0\17\4\25\0\1\4\1\225"+
    "\10\4\2\0\17\4\25\0\12\4\2\0\1\4\1\226"+
    "\15\4\25\0\1\227\11\4\2\0\17\4\25\0\3\4"+
    "\1\230\6\4\2\0\17\4\25\0\5\4\1\231\4\4"+
    "\2\0\17\4\25\0\1\232\11\4\2\0\17\4\25\0"+
    "\12\4\2\0\1\4\1\233\15\4\25\0\12\4\2\0"+
    "\3\4\1\234\13\4\25\0\12\4\2\0\4\4\1\235"+
    "\12\4\25\0\5\4\1\236\4\4\2\0\17\4\25\0"+
    "\12\4\2\0\1\4\1\237\15\4\25\0\3\4\1\240"+
    "\6\4\2\0\17\4\25\0\6\4\1\241\3\4\2\0"+
    "\17\4\25\0\12\4\2\0\1\4\1\242\15\4\25\0"+
    "\5\4\1\243\4\4\2\0\17\4\25\0\12\4\2\0"+
    "\3\4\1\244\13\4\25\0\1\4\1\245\10\4\2\0"+
    "\17\4\25\0\12\4\2\0\12\4\1\246\4\4\25\0"+
    "\3\4\1\247\6\4\2\0\17\4\25\0\3\4\1\250"+
    "\6\4\2\0\17\4\25\0\12\4\2\0\12\4\1\251"+
    "\4\4\25\0\1\252\11\4\2\0\17\4\25\0\12\4"+
    "\2\0\1\4\1\253\15\4\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5952];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\23\1\2\11\2\1\6\11\4\1\4\11"+
    "\15\1\1\0\13\1\2\0\5\11\31\1\2\11\111\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalisadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AnalisadorLexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 130) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { lexeme=yytext(); return ID;
          }
        case 63: break;
        case 37: 
          { return VAR;
          }
        case 64: break;
        case 6: 
          { return DIVISAO;
          }
        case 65: break;
        case 12: 
          { return VIRGULA;
          }
        case 66: break;
        case 39: 
          { lexeme=yytext(); return CARACTERE;
          }
        case 67: break;
        case 41: 
          { return FACA;
          }
        case 68: break;
        case 40: 
          { return REAL;
          }
        case 69: break;
        case 11: 
          { return PONTO;
          }
        case 70: break;
        case 62: 
          { return PROCEDIMENTO;
          }
        case 71: break;
        case 21: 
          { return SOMA;
          }
        case 72: break;
        case 53: 
          { return UTILIZE;
          }
        case 73: break;
        case 50: 
          { return LEIA_LN;
          }
        case 74: break;
        case 13: 
          { return ABRE_CHAVES;
          }
        case 75: break;
        case 19: 
          { return ATRIBUICAO;
          }
        case 76: break;
        case 33: 
          { return FIM;
          }
        case 77: break;
        case 24: 
          { return SE;
          }
        case 78: break;
        case 16: 
          { return FECHA_COLCHETE;
          }
        case 79: break;
        case 4: 
          { return E;
          }
        case 80: break;
        case 60: 
          { return ESCREVA_LN;
          }
        case 81: break;
        case 54: 
          { return ESCREVA;
          }
        case 82: break;
        case 23: 
          { return SUBTRACAO;
          }
        case 83: break;
        case 5: 
          { lexeme=yytext(); return INTEIRO;
          }
        case 84: break;
        case 32: 
          { return RESTO_DIVISAO;
          }
        case 85: break;
        case 44: 
          { return ENTAO;
          }
        case 86: break;
        case 42: 
          { return LEIA;
          }
        case 87: break;
        case 9: 
          { return ASPAS_DUPLAS;
          }
        case 88: break;
        case 7: 
          { return ABRE_PARENTESES;
          }
        case 89: break;
        case 26: 
          { return OU;
          }
        case 90: break;
        case 57: 
          { return INTEIRO;
          }
        case 91: break;
        case 2: 
          { lexeme=yytext(); return ERRO;
          }
        case 92: break;
        case 34: 
          { return ATE;
          }
        case 93: break;
        case 46: 
          { return BIB_IO;
          }
        case 94: break;
        case 35: 
          { lexeme=yytext(); return REAL;
          }
        case 95: break;
        case 8: 
          { return FECHA_PARENTESES;
          }
        case 96: break;
        case 14: 
          { return FECHA_CHAVES;
          }
        case 97: break;
        case 45: 
          { return SENAO;
          }
        case 98: break;
        case 30: 
          { return MENOR_IGUAL;
          }
        case 99: break;
        case 43: 
          { return PARA;
          }
        case 100: break;
        case 10: 
          { return ASPAS_SIMPLES;
          }
        case 101: break;
        case 52: 
          { return INICIO;
          }
        case 102: break;
        case 38: 
          { lexeme=yytext(); return PALAVRA;
          }
        case 103: break;
        case 58: 
          { return ENQUANTO;
          }
        case 104: break;
        case 36: 
          { return NAO;
          }
        case 105: break;
        case 25: 
          { lexeme=yytext(); return ID_INVALIDO;
          }
        case 106: break;
        case 15: 
          { return ABRE_COLCHETE;
          }
        case 107: break;
        case 29: 
          { return DIFERENTE;
          }
        case 108: break;
        case 61: 
          { return CARACTERE;
          }
        case 109: break;
        case 56: 
          { return PALAVRA;
          }
        case 110: break;
        case 28: 
          { return MAIOR_IGUAL;
          }
        case 111: break;
        case 49: 
          { return FUNCAO;
          }
        case 112: break;
        case 55: 
          { return ARRANJO;
          }
        case 113: break;
        case 31: 
          { return IGUALDADE;
          }
        case 114: break;
        case 47: 
          { return CONST;
          }
        case 115: break;
        case 59: 
          { return PROGRAMA;
          }
        case 116: break;
        case 18: 
          { return MENOR;
          }
        case 117: break;
        case 51: 
          { return LOGICO;
          }
        case 118: break;
        case 48: 
          { return REPITA;
          }
        case 119: break;
        case 1: 
          { /*Ignore*/
          }
        case 120: break;
        case 17: 
          { return MAIOR;
          }
        case 121: break;
        case 27: 
          { return DE;
          }
        case 122: break;
        case 22: 
          { return MULTIPLICACAO;
          }
        case 123: break;
        case 20: 
          { return POTENCIA;
          }
        case 124: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
